/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface FactoryUpgradeGateInterface extends utils.Interface {
  functions: {
    "isValidUpgradePath(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerNewUpgradePath(address,address[])": FunctionFragment;
    "unregisterUpgradePath(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isValidUpgradePath"
      | "owner"
      | "registerNewUpgradePath"
      | "unregisterUpgradePath"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isValidUpgradePath",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerNewUpgradePath",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterUpgradePath",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isValidUpgradePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerNewUpgradePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterUpgradePath",
    data: BytesLike
  ): Result;

  events: {
    "OwnerCanceled(address,address)": EventFragment;
    "OwnerPending(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpgradePathRegistered(address,address)": EventFragment;
    "UpgradePathRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerPending"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradePathRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradePathRemoved"): EventFragment;
}

export interface OwnerCanceledEventObject {
  previousOwner: string;
  potentialNewOwner: string;
}
export type OwnerCanceledEvent = TypedEvent<
  [string, string],
  OwnerCanceledEventObject
>;

export type OwnerCanceledEventFilter = TypedEventFilter<OwnerCanceledEvent>;

export interface OwnerPendingEventObject {
  previousOwner: string;
  potentialNewOwner: string;
}
export type OwnerPendingEvent = TypedEvent<
  [string, string],
  OwnerPendingEventObject
>;

export type OwnerPendingEventFilter = TypedEventFilter<OwnerPendingEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradePathRegisteredEventObject {
  newImpl: string;
  oldImpl: string;
}
export type UpgradePathRegisteredEvent = TypedEvent<
  [string, string],
  UpgradePathRegisteredEventObject
>;

export type UpgradePathRegisteredEventFilter =
  TypedEventFilter<UpgradePathRegisteredEvent>;

export interface UpgradePathRemovedEventObject {
  newImpl: string;
  oldImpl: string;
}
export type UpgradePathRemovedEvent = TypedEvent<
  [string, string],
  UpgradePathRemovedEventObject
>;

export type UpgradePathRemovedEventFilter =
  TypedEventFilter<UpgradePathRemovedEvent>;

export interface FactoryUpgradeGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryUpgradeGateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isValidUpgradePath(
      _newImpl: string,
      _currentImpl: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerNewUpgradePath(
      _newImpl: string,
      _supportedPrevImpls: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterUpgradePath(
      _newImpl: string,
      _prevImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  isValidUpgradePath(
    _newImpl: string,
    _currentImpl: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerNewUpgradePath(
    _newImpl: string,
    _supportedPrevImpls: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterUpgradePath(
    _newImpl: string,
    _prevImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isValidUpgradePath(
      _newImpl: string,
      _currentImpl: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerNewUpgradePath(
      _newImpl: string,
      _supportedPrevImpls: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterUpgradePath(
      _newImpl: string,
      _prevImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerCanceled(address,address)"(
      previousOwner?: string | null,
      potentialNewOwner?: string | null
    ): OwnerCanceledEventFilter;
    OwnerCanceled(
      previousOwner?: string | null,
      potentialNewOwner?: string | null
    ): OwnerCanceledEventFilter;

    "OwnerPending(address,address)"(
      previousOwner?: string | null,
      potentialNewOwner?: string | null
    ): OwnerPendingEventFilter;
    OwnerPending(
      previousOwner?: string | null,
      potentialNewOwner?: string | null
    ): OwnerPendingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpgradePathRegistered(address,address)"(
      newImpl?: null,
      oldImpl?: null
    ): UpgradePathRegisteredEventFilter;
    UpgradePathRegistered(
      newImpl?: null,
      oldImpl?: null
    ): UpgradePathRegisteredEventFilter;

    "UpgradePathRemoved(address,address)"(
      newImpl?: null,
      oldImpl?: null
    ): UpgradePathRemovedEventFilter;
    UpgradePathRemoved(
      newImpl?: null,
      oldImpl?: null
    ): UpgradePathRemovedEventFilter;
  };

  estimateGas: {
    isValidUpgradePath(
      _newImpl: string,
      _currentImpl: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerNewUpgradePath(
      _newImpl: string,
      _supportedPrevImpls: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterUpgradePath(
      _newImpl: string,
      _prevImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isValidUpgradePath(
      _newImpl: string,
      _currentImpl: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerNewUpgradePath(
      _newImpl: string,
      _supportedPrevImpls: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterUpgradePath(
      _newImpl: string,
      _prevImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
