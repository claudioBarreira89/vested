/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ERC721DropTestInterface extends utils.Interface {
  functions: {
    "DEFAULT_FUNDS_RECIPIENT_ADDRESS()": FunctionFragment;
    "DEFAULT_OWNER_ADDRESS()": FunctionFragment;
    "DEFAULT_ZORA_DAO_ADDRESS()": FunctionFragment;
    "IS_SCRIPT()": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "UPGRADE_GATE_ADMIN_ADDRESS()": FunctionFragment;
    "dummyRenderer()": FunctionFragment;
    "factoryUpgradeGate()": FunctionFragment;
    "failed()": FunctionFragment;
    "feeManager()": FunctionFragment;
    "impl()": FunctionFragment;
    "mediaContract()": FunctionFragment;
    "ownedSubscriptionManager()": FunctionFragment;
    "setUp()": FunctionFragment;
    "testSetSalesConfiguration()": FunctionFragment;
    "test_AdminMint()": FunctionFragment;
    "test_AdminMintAirdrop()": FunctionFragment;
    "test_AdminMintAirdropFails()": FunctionFragment;
    "test_AdminMintBatch()": FunctionFragment;
    "test_AdminMintBatchFails()": FunctionFragment;
    "test_Burn()": FunctionFragment;
    "test_BurnNonOwner()": FunctionFragment;
    "test_EIP165()": FunctionFragment;
    "test_EditionSizeZero()": FunctionFragment;
    "test_GlobalLimit(uint16)": FunctionFragment;
    "test_Init()": FunctionFragment;
    "test_InvalidFinalizeOpenEdition()": FunctionFragment;
    "test_Mint()": FunctionFragment;
    "test_MintLimit(uint8)": FunctionFragment;
    "test_MintWrongValue()": FunctionFragment;
    "test_OnlyAdminEnableSubscription()": FunctionFragment;
    "test_ProxySubscriptionAccess()": FunctionFragment;
    "test_ProxySubscriptionAccessOnlyAdmin()": FunctionFragment;
    "test_Purchase(uint64)": FunctionFragment;
    "test_PurchaseTime()": FunctionFragment;
    "test_SubscriptionEnabled()": FunctionFragment;
    "test_UpgradeApproved()": FunctionFragment;
    "test_ValidFinalizeOpenEdition()": FunctionFragment;
    "test_Withdraw(uint128)": FunctionFragment;
    "test_WithdrawNotAllowed()": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_FUNDS_RECIPIENT_ADDRESS"
      | "DEFAULT_OWNER_ADDRESS"
      | "DEFAULT_ZORA_DAO_ADDRESS"
      | "IS_SCRIPT"
      | "IS_TEST"
      | "UPGRADE_GATE_ADMIN_ADDRESS"
      | "dummyRenderer"
      | "factoryUpgradeGate"
      | "failed"
      | "feeManager"
      | "impl"
      | "mediaContract"
      | "ownedSubscriptionManager"
      | "setUp"
      | "testSetSalesConfiguration"
      | "test_AdminMint"
      | "test_AdminMintAirdrop"
      | "test_AdminMintAirdropFails"
      | "test_AdminMintBatch"
      | "test_AdminMintBatchFails"
      | "test_Burn"
      | "test_BurnNonOwner"
      | "test_EIP165"
      | "test_EditionSizeZero"
      | "test_GlobalLimit"
      | "test_Init"
      | "test_InvalidFinalizeOpenEdition"
      | "test_Mint"
      | "test_MintLimit"
      | "test_MintWrongValue"
      | "test_OnlyAdminEnableSubscription"
      | "test_ProxySubscriptionAccess"
      | "test_ProxySubscriptionAccessOnlyAdmin"
      | "test_Purchase"
      | "test_PurchaseTime"
      | "test_SubscriptionEnabled"
      | "test_UpgradeApproved"
      | "test_ValidFinalizeOpenEdition"
      | "test_Withdraw"
      | "test_WithdrawNotAllowed"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_FUNDS_RECIPIENT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_OWNER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ZORA_DAO_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_GATE_ADMIN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dummyRenderer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryUpgradeGate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "impl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mediaContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownedSubscriptionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testSetSalesConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_AdminMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_AdminMintAirdrop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_AdminMintAirdropFails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_AdminMintBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_AdminMintBatchFails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "test_Burn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "test_BurnNonOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_EIP165",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_EditionSizeZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_GlobalLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "test_Init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "test_InvalidFinalizeOpenEdition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "test_Mint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "test_MintLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_MintWrongValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_OnlyAdminEnableSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ProxySubscriptionAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ProxySubscriptionAccessOnlyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_Purchase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_PurchaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_SubscriptionEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_UpgradeApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ValidFinalizeOpenEdition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_Withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_WithdrawNotAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_FUNDS_RECIPIENT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_OWNER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ZORA_DAO_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_GATE_ADMIN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dummyRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryUpgradeGate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "impl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mediaContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedSubscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testSetSalesConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_AdminMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_AdminMintAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_AdminMintAirdropFails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_AdminMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_AdminMintBatchFails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test_Burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test_BurnNonOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_EIP165",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_EditionSizeZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_GlobalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test_Init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test_InvalidFinalizeOpenEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test_Mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test_MintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_MintWrongValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_OnlyAdminEnableSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ProxySubscriptionAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ProxySubscriptionAccessOnlyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_Purchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_PurchaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_SubscriptionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_UpgradeApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ValidFinalizeOpenEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_Withdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_WithdrawNotAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {
    "FundsWithdrawn(address,address,uint256,address,uint256)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface FundsWithdrawnEventObject {
  withdrawnBy: string;
  withdrawnTo: string;
  amount: BigNumber;
  feeRecipient: string;
  feeAmount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface ERC721DropTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721DropTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_FUNDS_RECIPIENT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    DEFAULT_OWNER_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ZORA_DAO_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    UPGRADE_GATE_ADMIN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    dummyRenderer(overrides?: CallOverrides): Promise<[string]>;

    factoryUpgradeGate(overrides?: CallOverrides): Promise<[string]>;

    failed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    impl(overrides?: CallOverrides): Promise<[string]>;

    mediaContract(overrides?: CallOverrides): Promise<[string]>;

    ownedSubscriptionManager(overrides?: CallOverrides): Promise<[string]>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testSetSalesConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_AdminMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_AdminMintAirdrop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_AdminMintAirdropFails(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_AdminMintBatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_AdminMintBatchFails(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_Burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_BurnNonOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_EIP165(overrides?: CallOverrides): Promise<[void]>;

    test_EditionSizeZero(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_GlobalLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_Init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_InvalidFinalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_Mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_MintLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_MintWrongValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_OnlyAdminEnableSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_ProxySubscriptionAccess(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_ProxySubscriptionAccessOnlyAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_Purchase(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_PurchaseTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_SubscriptionEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_UpgradeApproved(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_ValidFinalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_Withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_WithdrawNotAllowed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_FUNDS_RECIPIENT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  DEFAULT_OWNER_ADDRESS(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ZORA_DAO_ADDRESS(overrides?: CallOverrides): Promise<string>;

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  UPGRADE_GATE_ADMIN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  dummyRenderer(overrides?: CallOverrides): Promise<string>;

  factoryUpgradeGate(overrides?: CallOverrides): Promise<string>;

  failed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  impl(overrides?: CallOverrides): Promise<string>;

  mediaContract(overrides?: CallOverrides): Promise<string>;

  ownedSubscriptionManager(overrides?: CallOverrides): Promise<string>;

  setUp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testSetSalesConfiguration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_AdminMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_AdminMintAirdrop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_AdminMintAirdropFails(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_AdminMintBatch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_AdminMintBatchFails(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_Burn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_BurnNonOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_EIP165(overrides?: CallOverrides): Promise<void>;

  test_EditionSizeZero(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_GlobalLimit(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_Init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_InvalidFinalizeOpenEdition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_Mint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_MintLimit(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_MintWrongValue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_OnlyAdminEnableSubscription(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_ProxySubscriptionAccess(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_ProxySubscriptionAccessOnlyAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_Purchase(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_PurchaseTime(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_SubscriptionEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_UpgradeApproved(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_ValidFinalizeOpenEdition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_Withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_WithdrawNotAllowed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_FUNDS_RECIPIENT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    DEFAULT_OWNER_ADDRESS(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ZORA_DAO_ADDRESS(overrides?: CallOverrides): Promise<string>;

    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    UPGRADE_GATE_ADMIN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    dummyRenderer(overrides?: CallOverrides): Promise<string>;

    factoryUpgradeGate(overrides?: CallOverrides): Promise<string>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    impl(overrides?: CallOverrides): Promise<string>;

    mediaContract(overrides?: CallOverrides): Promise<string>;

    ownedSubscriptionManager(overrides?: CallOverrides): Promise<string>;

    setUp(overrides?: CallOverrides): Promise<void>;

    testSetSalesConfiguration(overrides?: CallOverrides): Promise<void>;

    test_AdminMint(overrides?: CallOverrides): Promise<void>;

    test_AdminMintAirdrop(overrides?: CallOverrides): Promise<void>;

    test_AdminMintAirdropFails(overrides?: CallOverrides): Promise<void>;

    test_AdminMintBatch(overrides?: CallOverrides): Promise<void>;

    test_AdminMintBatchFails(overrides?: CallOverrides): Promise<void>;

    test_Burn(overrides?: CallOverrides): Promise<void>;

    test_BurnNonOwner(overrides?: CallOverrides): Promise<void>;

    test_EIP165(overrides?: CallOverrides): Promise<void>;

    test_EditionSizeZero(overrides?: CallOverrides): Promise<void>;

    test_GlobalLimit(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    test_Init(overrides?: CallOverrides): Promise<void>;

    test_InvalidFinalizeOpenEdition(overrides?: CallOverrides): Promise<void>;

    test_Mint(overrides?: CallOverrides): Promise<void>;

    test_MintLimit(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    test_MintWrongValue(overrides?: CallOverrides): Promise<void>;

    test_OnlyAdminEnableSubscription(overrides?: CallOverrides): Promise<void>;

    test_ProxySubscriptionAccess(overrides?: CallOverrides): Promise<void>;

    test_ProxySubscriptionAccessOnlyAdmin(
      overrides?: CallOverrides
    ): Promise<void>;

    test_Purchase(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    test_PurchaseTime(overrides?: CallOverrides): Promise<void>;

    test_SubscriptionEnabled(overrides?: CallOverrides): Promise<void>;

    test_UpgradeApproved(overrides?: CallOverrides): Promise<void>;

    test_ValidFinalizeOpenEdition(overrides?: CallOverrides): Promise<void>;

    test_Withdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    test_WithdrawNotAllowed(overrides?: CallOverrides): Promise<void>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FundsWithdrawn(address,address,uint256,address,uint256)"(
      withdrawnBy?: string | null,
      withdrawnTo?: string | null,
      amount?: null,
      feeRecipient?: null,
      feeAmount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      withdrawnBy?: string | null,
      withdrawnTo?: string | null,
      amount?: null,
      feeRecipient?: null,
      feeAmount?: null
    ): FundsWithdrawnEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    DEFAULT_FUNDS_RECIPIENT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_OWNER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ZORA_DAO_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_GATE_ADMIN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    dummyRenderer(overrides?: CallOverrides): Promise<BigNumber>;

    factoryUpgradeGate(overrides?: CallOverrides): Promise<BigNumber>;

    failed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    impl(overrides?: CallOverrides): Promise<BigNumber>;

    mediaContract(overrides?: CallOverrides): Promise<BigNumber>;

    ownedSubscriptionManager(overrides?: CallOverrides): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testSetSalesConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_AdminMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_AdminMintAirdrop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_AdminMintAirdropFails(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_AdminMintBatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_AdminMintBatchFails(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_Burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_BurnNonOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_EIP165(overrides?: CallOverrides): Promise<BigNumber>;

    test_EditionSizeZero(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_GlobalLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_Init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_InvalidFinalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_Mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_MintLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_MintWrongValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_OnlyAdminEnableSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_ProxySubscriptionAccess(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_ProxySubscriptionAccessOnlyAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_Purchase(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_PurchaseTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_SubscriptionEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_UpgradeApproved(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_ValidFinalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_Withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_WithdrawNotAllowed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_FUNDS_RECIPIENT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_OWNER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ZORA_DAO_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADE_GATE_ADMIN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dummyRenderer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factoryUpgradeGate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    impl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mediaContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownedSubscriptionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testSetSalesConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_AdminMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_AdminMintAirdrop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_AdminMintAirdropFails(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_AdminMintBatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_AdminMintBatchFails(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_Burn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_BurnNonOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_EIP165(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_EditionSizeZero(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_GlobalLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_Init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_InvalidFinalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_Mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_MintLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_MintWrongValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_OnlyAdminEnableSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_ProxySubscriptionAccess(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_ProxySubscriptionAccessOnlyAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_Purchase(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_PurchaseTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_SubscriptionEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_UpgradeApproved(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_ValidFinalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_Withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_WithdrawNotAllowed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
