/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface OperatorFilterRegistryErrorsAndEvents0810Interface
  extends utils.Interface {
  functions: {};

  events: {
    "CodeHashUpdated(address,bytes32,bool)": EventFragment;
    "CodeHashesUpdated(address,bytes32[],bool)": EventFragment;
    "OperatorUpdated(address,address,bool)": EventFragment;
    "OperatorsUpdated(address,address[],bool)": EventFragment;
    "RegistrationUpdated(address,bool)": EventFragment;
    "SubscriptionUpdated(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CodeHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CodeHashesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionUpdated"): EventFragment;
}

export interface CodeHashUpdatedEventObject {
  registrant: string;
  codeHash: string;
  filtered: boolean;
}
export type CodeHashUpdatedEvent = TypedEvent<
  [string, string, boolean],
  CodeHashUpdatedEventObject
>;

export type CodeHashUpdatedEventFilter = TypedEventFilter<CodeHashUpdatedEvent>;

export interface CodeHashesUpdatedEventObject {
  registrant: string;
  codeHashes: string[];
  filtered: boolean;
}
export type CodeHashesUpdatedEvent = TypedEvent<
  [string, string[], boolean],
  CodeHashesUpdatedEventObject
>;

export type CodeHashesUpdatedEventFilter =
  TypedEventFilter<CodeHashesUpdatedEvent>;

export interface OperatorUpdatedEventObject {
  registrant: string;
  operator: string;
  filtered: boolean;
}
export type OperatorUpdatedEvent = TypedEvent<
  [string, string, boolean],
  OperatorUpdatedEventObject
>;

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>;

export interface OperatorsUpdatedEventObject {
  registrant: string;
  operators: string[];
  filtered: boolean;
}
export type OperatorsUpdatedEvent = TypedEvent<
  [string, string[], boolean],
  OperatorsUpdatedEventObject
>;

export type OperatorsUpdatedEventFilter =
  TypedEventFilter<OperatorsUpdatedEvent>;

export interface RegistrationUpdatedEventObject {
  registrant: string;
  registered: boolean;
}
export type RegistrationUpdatedEvent = TypedEvent<
  [string, boolean],
  RegistrationUpdatedEventObject
>;

export type RegistrationUpdatedEventFilter =
  TypedEventFilter<RegistrationUpdatedEvent>;

export interface SubscriptionUpdatedEventObject {
  registrant: string;
  subscription: string;
  subscribed: boolean;
}
export type SubscriptionUpdatedEvent = TypedEvent<
  [string, string, boolean],
  SubscriptionUpdatedEventObject
>;

export type SubscriptionUpdatedEventFilter =
  TypedEventFilter<SubscriptionUpdatedEvent>;

export interface OperatorFilterRegistryErrorsAndEvents0810
  extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperatorFilterRegistryErrorsAndEvents0810Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "CodeHashUpdated(address,bytes32,bool)"(
      registrant?: string | null,
      codeHash?: BytesLike | null,
      filtered?: boolean | null
    ): CodeHashUpdatedEventFilter;
    CodeHashUpdated(
      registrant?: string | null,
      codeHash?: BytesLike | null,
      filtered?: boolean | null
    ): CodeHashUpdatedEventFilter;

    "CodeHashesUpdated(address,bytes32[],bool)"(
      registrant?: string | null,
      codeHashes?: null,
      filtered?: boolean | null
    ): CodeHashesUpdatedEventFilter;
    CodeHashesUpdated(
      registrant?: string | null,
      codeHashes?: null,
      filtered?: boolean | null
    ): CodeHashesUpdatedEventFilter;

    "OperatorUpdated(address,address,bool)"(
      registrant?: string | null,
      operator?: string | null,
      filtered?: boolean | null
    ): OperatorUpdatedEventFilter;
    OperatorUpdated(
      registrant?: string | null,
      operator?: string | null,
      filtered?: boolean | null
    ): OperatorUpdatedEventFilter;

    "OperatorsUpdated(address,address[],bool)"(
      registrant?: string | null,
      operators?: null,
      filtered?: boolean | null
    ): OperatorsUpdatedEventFilter;
    OperatorsUpdated(
      registrant?: string | null,
      operators?: null,
      filtered?: boolean | null
    ): OperatorsUpdatedEventFilter;

    "RegistrationUpdated(address,bool)"(
      registrant?: string | null,
      registered?: boolean | null
    ): RegistrationUpdatedEventFilter;
    RegistrationUpdated(
      registrant?: string | null,
      registered?: boolean | null
    ): RegistrationUpdatedEventFilter;

    "SubscriptionUpdated(address,address,bool)"(
      registrant?: string | null,
      subscription?: string | null,
      subscribed?: boolean | null
    ): SubscriptionUpdatedEventFilter;
    SubscriptionUpdated(
      registrant?: string | null,
      subscription?: string | null,
      subscribed?: boolean | null
    ): SubscriptionUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
