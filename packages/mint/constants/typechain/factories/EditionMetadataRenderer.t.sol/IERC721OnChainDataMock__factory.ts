/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  IERC721OnChainDataMock,
  IERC721OnChainDataMockInterface,
} from "../../EditionMetadataRenderer.t.sol/IERC721OnChainDataMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalMinted",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "config",
    outputs: [
      {
        components: [
          {
            internalType: "contract IMetadataRenderer",
            name: "metadataRenderer",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "editionSize",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "royaltyBPS",
            type: "uint16",
          },
          {
            internalType: "address payable",
            name: "fundsRecipient",
            type: "address",
          },
        ],
        internalType: "struct IERC721Drop.Configuration",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "saleDetails",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "publicSaleActive",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "presaleActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "publicSalePrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "publicSaleStart",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "publicSaleEnd",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "presaleStart",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "presaleEnd",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "presaleMerkleRoot",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "maxSalePurchasePerAddress",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalMinted",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSupply",
            type: "uint256",
          },
        ],
        internalType: "struct IERC721Drop.SaleDetails",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161058238038061058283398101604081905261002f9161011d565b6040805161016081018252600080825260208083018290528284018290526060808401839052608080850184905260a0850184905260c0850184905260e0850184905261010085018490526101208501889052610140909401869052825461ffff191683556001839055600283905560038390556004839055600596909655600694909455825191820183528152600c928101929092526103e8908201526101639101819052600780546001600160f01b0319167d03e8000000000000000c0000000000000000000000000000000000000000179055600880546001600160a01b0319169091179055610141565b6000806040838503121561013057600080fd5b505080516020909101519092909150565b610432806101506000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde03146100465780633474a4a61461008e57806379502c55146101b4575b600080fd5b604080518082018252600981527f4d4f434b204e414d4500000000000000000000000000000000000000000000006020820152905161008591906102be565b60405180910390f35b6101a76040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915250604080516101608101825260005460ff808216151583526101009182900416151560208301526001549282019290925260025467ffffffffffffffff8082166060840152680100000000000000008204811660808401527001000000000000000000000000000000008204811660a084015278010000000000000000000000000000000000000000000000009091041660c082015260035460e08201526004549181019190915260055461012082015260065461014082015290565b6040516100859190610331565b610264604080516080810182526000808252602082018190529181018290526060810191909152506040805160808101825260075473ffffffffffffffffffffffffffffffffffffffff808216835274010000000000000000000000000000000000000000820467ffffffffffffffff1660208401527c010000000000000000000000000000000000000000000000000000000090910461ffff1692820192909252600854909116606082015290565b6040516100859190815173ffffffffffffffffffffffffffffffffffffffff908116825260208084015167ffffffffffffffff169083015260408084015161ffff1690830152606092830151169181019190915260800190565b600060208083528351808285015260005b818110156102eb578581018301518582016040015282016102cf565b818111156102fd576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b8151151581526101608101602083015161034f602084018215159052565b50604083015160408301526060830151610375606084018267ffffffffffffffff169052565b506080830151610391608084018267ffffffffffffffff169052565b5060a08301516103ad60a084018267ffffffffffffffff169052565b5060c08301516103c960c084018267ffffffffffffffff169052565b5060e08381015190830152610100808401519083015261012080840151908301526101409283015192909101919091529056fea26469706673582212204fdb2c0d1d19cdfd46844f7ce609c0b73481304ec0e9319060924441af87f53a64736f6c634300080a0033";

type IERC721OnChainDataMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IERC721OnChainDataMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IERC721OnChainDataMock__factory extends ContractFactory {
  constructor(...args: IERC721OnChainDataMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    totalMinted: BigNumberish,
    maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IERC721OnChainDataMock> {
    return super.deploy(
      totalMinted,
      maxSupply,
      overrides || {}
    ) as Promise<IERC721OnChainDataMock>;
  }
  override getDeployTransaction(
    totalMinted: BigNumberish,
    maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(totalMinted, maxSupply, overrides || {});
  }
  override attach(address: string): IERC721OnChainDataMock {
    return super.attach(address) as IERC721OnChainDataMock;
  }
  override connect(signer: Signer): IERC721OnChainDataMock__factory {
    return super.connect(signer) as IERC721OnChainDataMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IERC721OnChainDataMockInterface {
    return new utils.Interface(_abi) as IERC721OnChainDataMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IERC721OnChainDataMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IERC721OnChainDataMock;
  }
}
