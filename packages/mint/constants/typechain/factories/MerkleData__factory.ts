/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MerkleData, MerkleDataInterface } from "../MerkleData";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "data",
    outputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "getTestSetByName",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "user",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "maxMint",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "mintPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32[]",
                name: "proof",
                type: "bytes32[]",
              },
            ],
            internalType: "struct MerkleData.MerkleEntry[]",
            name: "entries",
            type: "tuple[]",
          },
          {
            internalType: "bytes32",
            name: "root",
            type: "bytes32",
          },
        ],
        internalType: "struct MerkleData.TestData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604080516f746573742d332d61646472657373657360801b81526000601082015281519081900360300181207f17fd3b63857e2260948e1b1c1eb2029cbc98e0c78713197225324a234b319cd1600190910155600280825260608083018452926020830190803683370190505090507f410850346a047658db0d67e0a2755371caf856be5b4692dd69895577f9172d5b60001b81600081518110620000bb57620000bb62000990565b60200260200101818152505060008051602062000e4083398151915260001b81600181518110620000f057620000f062000990565b60209081029190910101526040516f746573742d332d61646472657373657360801b8152600090601001908152604080519182900360209081018320608084018352601084526001848301818152662386f26fc100009486019485526060860187815283548084018555600094855293859020875160049095020180546001600160a01b03959095166001600160a01b03199095169490941784559051918301919091559251600282015591518051620001b1926003850192019062000929565b5060029150620001be9050565b604051908082528060200260200182016040528015620001e8578160200160208202803683370190505b5090507f5466cc65fe36e24c9d6533d916f4db0096816deb47bdf805634d105ed273c8ab60001b8160008151811062000225576200022562000990565b60200260200101818152505060008051602062000e4083398151915260001b816001815181106200025a576200025a62000990565b60209081029190910101526040516f746573742d332d61646472657373657360801b8152600090601001908152604080519182900360209081018320608084018352601184526002848301818152662386f26fc1000094860194855260608601878152835460018181018655600095865294869020885160049092020180546001600160a01b03929092166001600160a01b03199092169190911781559151938201939093559351908401555180516200031b926003850192019062000929565b5060019150620003289050565b60405190808252806020026020018201604052801562000352578160200160208202803683370190505b5090507f0e39a7a99a7f041bb3d20ec2d4724dd9541d631fdaf2c15820def3c077c71e2660001b816000815181106200038f576200038f62000990565b60209081029190910101526040516f746573742d332d61646472657373657360801b81526000906010019081526040805160209281900383018120608082018352601282526003848301818152662386f26fc1000094840194855260608401878152835460018082018655600095865294889020865160049092020180546001600160a01b0319166001600160a01b039092169190911781559151938201939093559351600285015590518051929462000450939285019291019062000929565b5050604080516c746573742d322d70726963657360981b81526000600d820152815190819003602d01812060008051602062000e0083398151915260019182015580825281830190925291506020808301908036833701905050905060008051602062000e2083398151915260001b81600081518110620004d557620004d562000990565b60209081029190910101526040516c746573742d322d70726963657360981b8152600090600d0190815260408051918290036020908101832060808401835260108452600284830181815267016345785d8a000094860194855260608601878152835460018181018655600095865294869020885160049092020180546001600160a01b03929092166001600160a01b031990921691909117815591519382019390935593519084015551805162000594926003850192019062000929565b5060019150620005a19050565b604051908082528060200260200182016040528015620005cb578160200160208202803683370190505b50905060008051602062000de083398151915260001b81600081518110620005f757620005f762000990565b60209081029190910101526040516c746573742d322d70726963657360981b8152600090600d019081526040805191829003602090810183206080840183526010845260028483018181526702c68af0bb14000094860194855260608601878152835460018181018655600095865294869020885160049092020180546001600160a01b03929092166001600160a01b0319909216919091178155915193820193909355935190840155518051620006b6926003850192019062000929565b5050604080516d1d195cdd0b5b585e0b58dbdd5b9d60921b81526000600e820152815190819003602e01812060008051602062000e0083398151915260019182015580825281830190925291506020808301908036833701905050905060008051602062000e2083398151915260001b816000815181106200073c576200073c62000990565b60209081029190910101526040516d1d195cdd0b5b585e0b58dbdd5b9d60921b8152600090600e0190815260408051918290036020908101832060808401835260108452600284830181815267016345785d8a000094860194855260608601878152835460018181018655600095865294869020885160049092020180546001600160a01b03929092166001600160a01b0319909216919091178155915193820193909355935190840155518051620007fc926003850192019062000929565b5060019150620008099050565b60405190808252806020026020018201604052801562000833578160200160208202803683370190505b50905060008051602062000de083398151915260001b816000815181106200085f576200085f62000990565b60209081029190910101526040516d1d195cdd0b5b585e0b58dbdd5b9d60921b8152600090600e019081526040805191829003602090810183206080840183526010845260028483018181526702c68af0bb14000094860194855260608601878152835460018181018655600095865294869020885160049092020180546001600160a01b03929092166001600160a01b03199092169190911781559151938201939093559351908401555180516200091f926003850192019062000929565b50505050620009a6565b82805482825590600052602060002090810192821562000967579160200282015b82811115620009675782518255916020019190600101906200094a565b506200097592915062000979565b5090565b5b808211156200097557600081556001016200097a565b634e487b7160e01b600052603260045260246000fd5b61042a80620009b66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806304f6748c1461003b5780634595307e1461007c575b600080fd5b6100696100493660046101f1565b805160208183018101805160008252928201919093012091526001015481565b6040519081526020015b60405180910390f35b61008f61008a3660046101f1565b61009c565b60405161007391906102c0565b6040805180820190915260608152600060208201526000826040516100c191906103b9565b908152604080519182900360209081018320805460609281028501830184529284018381529092849284919060009085015b828210156101a95760008481526020908190206040805160808101825260048602909201805473ffffffffffffffffffffffffffffffffffffffff1683526001810154838501526002810154838301526003810180548351818702810187019094528084529394919360608601939283018282801561019157602002820191906000526020600020905b81548152602001906001019080831161017d575b505050505081525050815260200190600101906100f3565b5050505081526020016001820154815250509050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561020357600080fd5b813567ffffffffffffffff8082111561021b57600080fd5b818401915084601f83011261022f57600080fd5b813581811115610241576102416101c2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610287576102876101c2565b816040528281528760208487010111156102a057600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083526060808401855160408085880152828251808552608094508489019150848160051b8a010187850194506000805b838110156103a2578b83037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800185528651805173ffffffffffffffffffffffffffffffffffffffff1684528a8101518b85015286810151878501528901518984018990528051898501819052908b0190839060a08601905b8083101561038d5783518252928d019260019290920191908d019061036d565b50988c0198968c0196945050506001016102f5565b505096909901519190970152509195945050505050565b6000825160005b818110156103da57602081860181015185830152016103c0565b818111156103e9576000828501525b50919091019291505056fea264697066735822122033a37ea2343020fccf46633e698f97964985ba2e468ed56c25bdc87a81c85ac964736f6c634300080a0033babae39e08c9636595a1a4edd5850334f105c1cedb96c37659d1a9e39cb48615b7d8ff9be4b222c3049431d7b5982cbd3e64e5902f0ca4a2e3527be999a12d87cd1f92f2177fa8f6c51829045204caf23439f3e448bb0b94e5134e5b9f11ea4cc97b6b12a9053ef9561f3ba1a26d6f089fa77055a4a254f71094c89168ae2aaf";

type MerkleDataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleDataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleData__factory extends ContractFactory {
  constructor(...args: MerkleDataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleData> {
    return super.deploy(overrides || {}) as Promise<MerkleData>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleData {
    return super.attach(address) as MerkleData;
  }
  override connect(signer: Signer): MerkleData__factory {
    return super.connect(signer) as MerkleData__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleDataInterface {
    return new utils.Interface(_abi) as MerkleDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleData {
    return new Contract(address, _abi, signerOrProvider) as MerkleData;
  }
}
